from django.shortcuts import render
import sys
import os
import hashlib
from malysis.models import DataStorage

def formPage(request):
    data = {
        'pdfid' : 'Waiting for file',
        'oleobj' : 'Waiting for file',
        'oleid' : 'Waiting for file',
        'mraptor' : 'Waiting for file',
        'sha1' : 'Waiting for file',
        'md5' : 'Waiting for file',
        'details' : ''
    }
    data['total'] = len(DataStorage.objects.all())
    data['malicious'] = len(DataStorage.objects.filter(malicious=True))
    data['notMalicious'] = data['total']-data['malicious']

    if request.method == 'POST':
        script_dir = os.path.dirname( __file__ )
        pathOfLibraries = os.path.join(script_dir, 'libraries')

        pdfIdPath = os.path.join(pathOfLibraries, 'pdfid_PL-0.0.11b')
        sys.path.append(pdfIdPath)

        origapyPath = os.path.join(pathOfLibraries, 'origapy-0.09')
        sys.path.append(origapyPath)

        oletoolsPath = os.path.join(pathOfLibraries, 'oletools-0.60.1', 'oletools')
        sys.path.append(oletoolsPath)

        import pdfid_PL as pdfid
        import origapy
        import oleid
        import mraptor
        import oleobj

        mod = DataStorage()
        mod.file = request.FILES['file']
        mod.save()

        form = DataStorage.objects.filter(id = mod.pk)
        for i in form:
            hasher = hashlib.md5()
            BLOCKSIZE = 65536
            with open(os.path.dirname(os.path.dirname( __file__ )) + i.file.url, 'rb') as afile:
                buf = afile.read(BLOCKSIZE)
                while len(buf) > 0:
                    hasher.update(buf)
                    buf = afile.read(BLOCKSIZE)
            print(hasher.hexdigest())
            data['md5'] = hasher.hexdigest()

            hasher = hashlib.sha1()
            BLOCKSIZE = 65536
            with open(os.path.dirname(os.path.dirname( __file__ )) + i.file.url, 'rb') as afile:
                buf = afile.read(BLOCKSIZE)
                while len(buf) > 0:
                    hasher.update(buf)
                    buf = afile.read(BLOCKSIZE)
            print(hasher.hexdigest())
            data['sha1'] = hasher.hexdigest()

            type = i.file.name.split('.')[len(i.file.name.split('.'))-1].lower()

            data['pdfid'] = 'Not Supported'
            data['oleobj'] = 'Not Supported'
            data['oleid'] = 'Not Supported'
            data['mraptor'] = 'Not Supported'
            data['total'] += 1

            if type == 'pdf':
                xmldoc, cleaned = pdfid.PDFiD(os.path.dirname(os.path.dirname( __file__ )) + i.file.url, raise_exceptions=True, return_cleaned=True, force=True, output_file='cleaned.pdf') 
                pretty_xml_as_string = xmldoc.toprettyxml()
                print(pretty_xml_as_string)
                data['details'] += pretty_xml_as_string
                if cleaned:
                    data['pdfid'] = 'Malicious'
                    print('Malicious (according to PDFiD)')
                    i.malicious = True
                    data['malicious'] += 1
                else:
                    data['pdfid'] = 'Not Malicious'
                    print('Clean (according to PDFiD)')
                    data['notMalicious'] += 1

            if type in ['rtf', 'doc', 'docx', 'xlsx', 'xls']:
                data['oleid'], x = oleid.Main(os.path.dirname(os.path.dirname( __file__ )) + i.file.url) 
                data['details'] += x
                print(x)
                if(data['oleid']):
                    data['oleid'] = 'Not Malicious'
                    data['notMalicious'] += 1
                else:
                    data['oleid'] = 'Malicious'
                    i.malicious = True
                    data['malicious'] += 1

            if type in ['doc','dot', 'docm', 'dotm', 'xls', 'xlsm', 'xlsb', 'ppt','pptm', 'ppsm', 'xml', 'mht', 'pub', 'docx', 'pptx']:
                data['mraptor'] = mraptor.Main(os.path.dirname(os.path.dirname( __file__ )) + i.file.url)
                if(data['mraptor'] == 'Suspicious'):
                    i.malicious = True
                    data['malicious'] += 1
                else:
                    data['notMalicious'] += 1

            if type in ['doc', 'xls', 'ppt', 'docx', 'xlsx', 'pptx']:
                data['oleobj'] = oleobj.Main(os.path.dirname(os.path.dirname( __file__ )) + i.file.url)

                if(data['oleobj'] == 0):
                    data['oleobj'] = 'Safe'
                    data['notMalicious'] += 1
                else:
                    data['oleobj'] = 'Unsafe'
                    i.malicious = True
                    data['malicious'] += 1

            i.save()

        return render(request, 'templates/home.html', data)

    else:
        return render(request, 'templates/home.html', data)