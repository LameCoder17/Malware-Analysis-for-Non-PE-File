from django.shortcuts import render
import sys
import os
import hashlib
from malysis.models import DataStorage

def formPage(request):
    data = {
        'pdfid' : 'Waiting for file',
        'origapy' : 'Waiting for file',
        'pyxswf' : 'Waiting for file',
        'mraptor' : 'Waiting for file',
        'sha1' : 'Waiting for file',
        'md5' : 'Waiting for file'
    }
    if request.method == 'POST':
        script_dir = os.path.dirname( __file__ )
        pathOfLibraries = os.path.join(script_dir, 'libraries')

        pdfIdPath = os.path.join(pathOfLibraries, 'pdfid_PL-0.0.11b')
        sys.path.append(pdfIdPath)

        origapyPath = os.path.join(pathOfLibraries, 'origapy-0.09')
        sys.path.append(origapyPath)

        oletoolsPath = os.path.join(pathOfLibraries, 'oletools-0.60.1', 'oletools')
        sys.path.append(oletoolsPath)

        import pdfid_PL as pdfid
        import origapy
        import pyxswf
        import mraptor

        mod = DataStorage()
        mod.file = request.FILES['file']
        mod.save()

        form = DataStorage.objects.filter(id = mod.pk)
        for i in form:
            hasher = hashlib.md5()
            BLOCKSIZE = 65536
            with open(os.path.dirname(os.path.dirname( __file__ )) + i.file.url, 'rb') as afile:
                buf = afile.read(BLOCKSIZE)
                while len(buf) > 0:
                    hasher.update(buf)
                    buf = afile.read(BLOCKSIZE)
            print(hasher.hexdigest())
            data['md5'] = hasher.hexdigest()

            hasher = hashlib.sha1()
            BLOCKSIZE = 65536
            with open(os.path.dirname(os.path.dirname( __file__ )) + i.file.url, 'rb') as afile:
                buf = afile.read(BLOCKSIZE)
                while len(buf) > 0:
                    hasher.update(buf)
                    buf = afile.read(BLOCKSIZE)
            print(hasher.hexdigest())
            data['sha1'] = hasher.hexdigest()

            type = i.file.name.split('.')[len(i.file.name.split('.'))-1].lower()

            if type == 'pdf':
                xmldoc, cleaned = pdfid.PDFiD(os.path.dirname(os.path.dirname( __file__ )) + i.file.url, raise_exceptions=True, return_cleaned=True, force=True, output_file='cleaned.pdf') 
                pretty_xml_as_string = xmldoc.toprettyxml()
                print(pretty_xml_as_string)
                data['details'] = pretty_xml_as_string
                if cleaned:
                    data['pdfid'] = 'Malicious'
                    print('Malicious (according to PDFiD)')
                else:
                    data['pdfid'] = 'Not Malicious'
                    print('Clean (according to PDFiD)')
            elif type == 'rtf':
                data['pyxswf'] = pyxswf.moduleMain(os.path.dirname(os.path.dirname( __file__ )) + i.file.url, True)
            elif type == 'doc':
                data['pyxswf'] = pyxswf.moduleMain(os.path.dirname(os.path.dirname( __file__ )) + i.file.url, False)

            if type in ['doc','dot', 'docm', 'dotm', 'xls', 'xlsm', 'xlsb', 'ppt','pptm', 'ppsm', 'xml', 'mht', 'pub']:
                data['mraptor'] = mraptor.Main(os.path.dirname(os.path.dirname( __file__ )) + i.file.url)
            
        return render(request, 'templates/home.html', data)

    else:
        return render(request, 'templates/home.html', data)